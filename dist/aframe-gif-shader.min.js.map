{"version":3,"file":"aframe-gif-shader.min.js","mappings":"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","sources":["webpack://aframe-gif-shader/./lib/gifsparser.js","webpack://aframe-gif-shader/webpack/bootstrap","webpack://aframe-gif-shader/./index.js"],"sourcesContent":["/**\r\n * \r\n * Gif parser by @gtk2k\r\n * https://github.com/gtk2k/gtk2k.github.io/tree/master/animation_gif\r\n *\r\n */\r\n\r\nexports.parseGIF = function (gif, successCB, errorCB) {\r\n\r\n  var pos = 0;\r\n  var delayTimes = [];\r\n  var loadCnt = 0;\r\n  var graphicControl = null;\r\n  var imageData = null;\r\n  var frames = [];\r\n  var loopCnt = 0;\r\n  if (gif[0] === 0x47 && gif[1] === 0x49 && gif[2] === 0x46 && // 'GIF'\r\n    gif[3] === 0x38 && (gif[4] === 0x39 || gif[4] === 0x37) && gif[5] === 0x61) { // '89a'\r\n    pos += 13 + (+!!(gif[10] & 0x80) * Math.pow(2, (gif[10] & 0x07) + 1) * 3);\r\n    var gifHeader = gif.subarray(0, pos);\r\n    while (gif[pos] && gif[pos] !== 0x3b) {\r\n      var offset = pos, blockId = gif[pos];\r\n      if (blockId === 0x21) {\r\n        var label = gif[++pos];\r\n        if ([0x01, 0xfe, 0xf9, 0xff].indexOf(label) !== -1) {\r\n          label === 0xf9 && (delayTimes.push((gif[pos + 3] + (gif[pos + 4] << 8)) * 10));\r\n          label === 0xff && (loopCnt = gif[pos + 15] + (gif[pos + 16] << 8));\r\n          while (gif[++pos]) pos += gif[pos];\r\n          label === 0xf9 && (graphicControl = gif.subarray(offset, pos + 1));\r\n        } else { errorCB && errorCB('parseGIF: unknown label'); break; }\r\n      } else if (blockId === 0x2c) {\r\n        pos += 9;\r\n        pos += 1 + (+!!(gif[pos] & 0x80) * (Math.pow(2, (gif[pos] & 0x07) + 1) * 3));\r\n        while (gif[++pos]) pos += gif[pos];\r\n        var imageData = gif.subarray(offset, pos + 1);\r\n        // Each frame should have an image and a flag to indicate how to dispose it.\r\n        var frame = {\r\n          // http://matthewflickinger.com/lab/whatsinagif/animation_and_transparency.asp\r\n          // Disposal method is a flag stored in the 3rd byte of the graphics control\r\n          // This byte is packed and stores more information, only 3 bits of it represent the disposal\r\n          disposalMethod: graphicControl[3],\r\n          blob:URL.createObjectURL(new Blob([gifHeader, graphicControl, imageData]))\r\n        }\r\n        frames.push(frame);\r\n      } else { errorCB && errorCB('parseGIF: unknown blockId'); break; }\r\n      pos++;\r\n    }\r\n  } else { errorCB && errorCB('parseGIF: no GIF89a'); }\r\n  if (frames.length) {\r\n\r\n    var cnv = document.createElement('canvas');      \r\n    var loadImg = function () {\r\n      for(var i = 0; i < frames.length; i++){\r\n        var img = new Image();\r\n        img.onload = function (e, i) {\r\n          if (i === 0) {\r\n            cnv.width = img.width\r\n            cnv.height = img.height\r\n          }\r\n          loadCnt++;\r\n          frames[i] = this;\r\n          if (loadCnt === frames.length) {\r\n            loadCnt = 0;\r\n            imageFix(1);\r\n          }\r\n        }.bind(img, null, i);\r\n        // Link html image tag with the extracted GIF Frame \r\n        img.src = frames[i].blob;\r\n        img.disposalMethod = frames[i].disposalMethod;\r\n      }\r\n    }\r\n    var imageFix = function (i) {\r\n      var img = new Image();\r\n      img.onload = function (e, i) {\r\n        loadCnt++;\r\n        frames[i] = this;\r\n        if (loadCnt === frames.length) {\r\n          cnv = null;\r\n          successCB && successCB(delayTimes, loopCnt, frames);\r\n        } else {\r\n          imageFix(++i);\r\n        }\r\n      }.bind(img);\r\n      img.src = cnv.toDataURL('image/gif');\r\n    }\r\n    loadImg();\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { parseGIF } from './lib/gifsparser'\r\n\r\nif (typeof AFRAME === 'undefined') {\r\n  throw 'Component attempted to register before AFRAME was available.'\r\n}\r\n\r\n/* get util from AFRAME */\r\nconst { parseUrl } = AFRAME.utils.srcLoader\r\nconst { debug } = AFRAME.utils\r\n// debug.enable('shader:gif:*')\r\ndebug.enable('shader:gif:warn')\r\nconst warn = debug('shader:gif:warn')\r\nconst log = debug('shader:gif:debug')\r\n\r\n/* store data so that you won't load same data */\r\nconst gifData = {}\r\n\r\n/* create error message */\r\nfunction createError (err, src) {\r\n  return { status: 'error', src: src, message: err, timestamp: Date.now() }\r\n}\r\n\r\nAFRAME.registerShader('gif', {\r\n\r\n  /**\r\n   * For material component:\r\n   * @see https://github.com/aframevr/aframe/blob/60d198ef8e2bfbc57a13511ae5fca7b62e01691b/src/components/material.js\r\n   * For example of `registerShader`:\r\n   * @see https://github.com/aframevr/aframe/blob/41a50cd5ac65e462120ecc2e5091f5daefe3bd1e/src/shaders/flat.js\r\n   * For MeshBasicMaterial\r\n   * @see http://threejs.org/docs/#Reference/Materials/MeshBasicMaterial\r\n   */\r\n  schema: {\r\n\r\n    /* For material */\r\n    color: { type: 'color' },\r\n    fog: { default: true },\r\n\r\n    /* For texuture */\r\n    src: { default: null },\r\n    autoplay: { default: true },\r\n\r\n  },\r\n\r\n  /**\r\n   * Initialize material. Called once.\r\n   * @protected\r\n   */\r\n  init (data) {\r\n    log('init', data)\r\n    log(this.el.components)\r\n    this.__cnv = document.createElement('canvas')\r\n    this.__cnv.width = 2\r\n    this.__cnv.height = 2\r\n    this.__ctx = this.__cnv.getContext('2d')\r\n    this.__texture = new THREE.Texture(this.__cnv) //renders straight from a canvas\r\n    if (data.repeat) {\r\n      this.__texture.wrapS = THREE.RepeatWrapping;\r\n      this.__texture.wrapT = THREE.RepeatWrapping;\r\n      this.__texture.repeat.set( data.repeat.x, data.repeat.y );\r\n    }\r\n    this.__material = {}\r\n    this.__reset()\r\n    this.material = new THREE.MeshBasicMaterial({ map: this.__texture })\r\n    this.el.sceneEl.addBehavior(this)\r\n    return this.material\r\n  },\r\n\r\n  /**\r\n   * Update or create material.\r\n   * @param {object|null} oldData\r\n   */\r\n  update (oldData) {\r\n    log('update', oldData)\r\n    this.__updateMaterial(oldData)\r\n    this.__updateTexture(oldData)\r\n    return this.material\r\n  },\r\n\r\n  /**\r\n   * Called on each scene tick.\r\n   * @protected\r\n   */\r\n  tick (t) {\r\n    if (!this.__frames || this.paused()) return\r\n    if (Date.now() - this.__startTime >= this.__nextFrameTime) {\r\n      this.nextFrame()\r\n    }\r\n  },\r\n\r\n  /*================================\r\n  =            material            =\r\n  ================================*/\r\n\r\n  /**\r\n   * Updating existing material.\r\n   * @param {object} data - Material component data.\r\n   */\r\n  __updateMaterial (data) {\r\n    const { material } = this\r\n    const newData = this.__getMaterialData(data)\r\n    Object.keys(newData).forEach(key => {\r\n      material[key] = newData[key]\r\n    })\r\n  },\r\n\r\n\r\n  /**\r\n   * Builds and normalize material data, normalizing stuff along the way.\r\n   * @param {Object} data - Material data.\r\n   * @return {Object} data - Processed material data.\r\n   */\r\n  __getMaterialData (data) {\r\n    return {\r\n      fog: data.fog,\r\n      color: new THREE.Color(data.color),\r\n    }\r\n  },\r\n\r\n\r\n  /*==============================\r\n  =            texure            =\r\n  ==============================*/\r\n\r\n  /**\r\n   * set texure\r\n   * @private\r\n   * @param {Object} data\r\n   * @property {string} status - success / error\r\n   * @property {string} src - src url\r\n   * @property {array} times - array of time length of each image\r\n   * @property {number} cnt - total counts of gif images\r\n   * @property {array} frames - array of each image\r\n   * @property {Date} timestamp - created at the texure\r\n   */\r\n\r\n  __setTexure (data) {\r\n    log('__setTexure', data)\r\n    if (data.status === 'error') {\r\n      warn(`Error: ${data.message}\\nsrc: ${data.src}`)\r\n      this.__reset()\r\n    }\r\n    else if (data.status === 'success' && data.src !== this.__textureSrc) {\r\n      this.__reset()\r\n      /* Texture added or changed */\r\n      this.__ready(data)\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Update or create texure.\r\n   * @param {Object} data - Material component data.\r\n   */\r\n  __updateTexture (data) {\r\n    const { src, autoplay } = data\r\n\r\n    /* autoplay */\r\n    if (typeof autoplay === 'boolean') {\r\n      this.__autoplay = autoplay\r\n    }\r\n    else if (typeof autoplay === 'undefined') {\r\n      this.__autoplay = true\r\n    }\r\n    if (this.__autoplay && this.__frames) { this.play() }\r\n\r\n    /* src */\r\n    if (src) {\r\n      this.__validateSrc(src, this.__setTexure.bind(this))\r\n    } else {\r\n      /* Texture removed */\r\n      this.__reset()\r\n    }\r\n  },\r\n\r\n  /*=============================================\r\n  =            varidation for texure            =\r\n  =============================================*/\r\n\r\n  __validateSrc (src, cb) {\r\n\r\n    /* check if src is a url */\r\n    const url = parseUrl(src)\r\n    if (url) {\r\n      this.__getImageSrc(url, cb)\r\n      return\r\n    }\r\n\r\n    let message\r\n\r\n    /* check if src is a query selector */\r\n    const el = this.__validateAndGetQuerySelector(src)\r\n    if (!el || typeof el !== 'object') { return }\r\n    if (el.error) {\r\n      message = el.error\r\n    }\r\n    else {\r\n      const tagName = el.tagName.toLowerCase()\r\n      if (tagName === 'video') {\r\n        src = el.src\r\n        message = 'For video, please use `aframe-video-shader`'\r\n      }\r\n      else if (tagName === 'img') {\r\n        this.__getImageSrc(el.src, cb)\r\n        return\r\n      }\r\n      else {\r\n        message = `For <${tagName}> element, please use \\`aframe-html-shader\\``\r\n      }\r\n    }\r\n\r\n    /* if there is message, create error data */\r\n    if (message) {\r\n      const srcData = gifData[src]\r\n      const errData = createError(message, src)\r\n      /* callbacks */\r\n      if (srcData && srcData.callbacks) {\r\n        srcData.callbacks.forEach(cb => cb(errData))\r\n      }\r\n      else {\r\n        cb(errData)\r\n      }\r\n      /* overwrite */\r\n      gifData[src] = errData\r\n    }\r\n\r\n  },\r\n\r\n  /**\r\n   * Validate src is a valid image url\r\n   * @param  {string} src - url that will be tested\r\n   * @param  {function} cb - callback with the test result\r\n   */\r\n  __getImageSrc (src, cb) {\r\n\r\n    /* if src is same as previous, ignore this */\r\n    if (src === this.__textureSrc) { return }\r\n\r\n    /* check if we already get the srcData */\r\n    let srcData = gifData[src]\r\n    if (!srcData || !srcData.callbacks) {\r\n      /* create callback */\r\n      srcData = gifData[src] = { callbacks: [] }\r\n      srcData.callbacks.push(cb)\r\n    }\r\n    else if (srcData.src) {\r\n      cb(srcData)\r\n      return\r\n    }\r\n    else if (srcData.callbacks) {\r\n      /* add callback */\r\n      srcData.callbacks.push(cb)\r\n      return\r\n    }\r\n    const tester = new Image()\r\n    tester.crossOrigin = 'Anonymous'\r\n    tester.addEventListener('load', e => {\r\n      /* check if it is gif */\r\n      this.__getUnit8Array(src, arr => {\r\n        if (!arr) {\r\n          onError('This is not gif. Please use `shader:flat` instead')\r\n          return\r\n        }\r\n        /* parse data */\r\n        parseGIF(arr, (times, cnt, frames) => {\r\n          /* store data */\r\n          const newData = { status: 'success', src: src, times: times, cnt: cnt, frames: frames, timestamp: Date.now() }\r\n          /* callbacks */\r\n          if (srcData.callbacks) {\r\n            srcData.callbacks.forEach(cb => cb(newData))\r\n            /* overwrite */\r\n            gifData[src] = newData\r\n          }\r\n        }, (err) => onError(err))\r\n      })\r\n    })\r\n    tester.addEventListener('error', e => onError('Could be the following issue\\n - Not Image\\n - Not Found\\n - Server Error\\n - Cross-Origin Issue'))\r\n    function onError(message) {\r\n      /* create error data */\r\n      const errData = createError(message, src)\r\n      /* callbacks */\r\n      if (srcData.callbacks) {\r\n        srcData.callbacks.forEach(cb => cb(errData))\r\n        /* overwrite */\r\n        gifData[src] = errData\r\n      }\r\n    }\r\n    tester.src = src\r\n  },\r\n\r\n  /**\r\n   *\r\n   * get mine type\r\n   *\r\n   */\r\n  __getUnit8Array(src, cb) {\r\n    if (typeof cb !== 'function') { return }\r\n\r\n    const xhr = new XMLHttpRequest()\r\n    xhr.open('GET', src)\r\n    xhr.responseType = 'arraybuffer'\r\n    xhr.addEventListener('load', e => {\r\n      const uint8Array = new Uint8Array(e.target.response)\r\n      const arr = (uint8Array).subarray(0, 4)\r\n      // const header = arr.map(value => value.toString(16)).join('')\r\n      let header = ''\r\n      for(let i = 0; i < arr.length; i++) {\r\n        header += arr[i].toString(16)\r\n      }\r\n      if (header === '47494638') { cb(uint8Array) }\r\n      else { cb() }\r\n    })\r\n    xhr.addEventListener('error', e => {\r\n      log(e)\r\n      cb()\r\n    })\r\n    xhr.send()\r\n  },\r\n\r\n\r\n  /**\r\n   * Query and validate a query selector,\r\n   *\r\n   * @param  {string} selector - DOM selector.\r\n   * @return {object} Selected DOM element | error message object.\r\n   */\r\n  __validateAndGetQuerySelector (selector) {\r\n    try {\r\n      var el = document.querySelector(selector)\r\n      if (!el) {\r\n        return { error: 'No element was found matching the selector' }\r\n      }\r\n      return el\r\n    } catch (e) {  // Capture exception if it's not a valid selector.\r\n      return { error: 'no valid selector' }\r\n    }\r\n  },\r\n\r\n\r\n  /*================================\r\n  =            playback            =\r\n  ================================*/\r\n\r\n  /**\r\n   * Pause gif\r\n   * @public\r\n   */\r\n  pause () {\r\n    log('pause')\r\n    this.__paused = true\r\n  },\r\n\r\n  /**\r\n   * Play gif\r\n   * @public\r\n   */\r\n  play () {\r\n    log('play')\r\n    this.__paused = false\r\n  },\r\n\r\n  /**\r\n   * Toggle playback. play if paused and pause if played.\r\n   * @public\r\n   */\r\n\r\n  togglePlayback () {\r\n\r\n    if (this.paused()) { this.play() }\r\n    else { this.pause() }\r\n\r\n  },\r\n\r\n  /**\r\n   * Return if the playback is paused.\r\n   * @public\r\n   * @return {boolean}\r\n   */\r\n  paused () {\r\n    return this.__paused\r\n  },\r\n\r\n\r\n  /**\r\n   * Go to next frame\r\n   * @public\r\n   */\r\n  nextFrame () {\r\n    this.__draw()\r\n\r\n    /* update next frame time */\r\n    while ((Date.now() - this.__startTime) >= this.__nextFrameTime) {\r\n\r\n      this.__nextFrameTime += this.__delayTimes[this.__frameIdx++]\r\n      if ((this.__infinity || this.__loopCnt) && this.__frameCnt <= this.__frameIdx) {\r\n        /* go back to the first */\r\n        this.__frameIdx = 0\r\n      }\r\n    }\r\n\r\n  },\r\n\r\n  /*==============================\r\n   =            canvas            =\r\n   ==============================*/\r\n\r\n  /**\r\n   * clear canvas\r\n   * @private\r\n   */\r\n  __clearCanvas () {\r\n    this.__ctx.clearRect(0, 0, this.__width, this.__height)\r\n    this.__texture.needsUpdate = true\r\n  },\r\n\r\n  /**\r\n   * draw\r\n   * @private\r\n   */\r\n  __draw () {\r\n    if(this.__frameIdx != 0){\r\n      const lastFrame = this.__frames[this.__frameIdx -1 ]\r\n      // Disposal method indicates if you should clear or not the background.\r\n      // This flag is represented in binary and is a packed field which can also represent transparency.\r\n      // http://matthewflickinger.com/lab/whatsinagif/animation_and_transparency.asp\r\n      if(lastFrame.disposalMethod == 8 || lastFrame.disposalMethod == 9){\r\n        this.__clearCanvas();\r\n      }\r\n    } else {\r\n      this.__clearCanvas();\r\n    }\r\n    const actualFrame = this.__frames[this.__frameIdx]\r\n    if(typeof actualFrame !== 'undefined') {\r\n      this.__ctx.drawImage(actualFrame, 0, 0, this.__width, this.__height)\r\n      this.__texture.needsUpdate = true\r\n    }\r\n  },\r\n\r\n  /*============================\r\n  =            ready            =\r\n  ============================*/\r\n\r\n  /**\r\n   * setup gif animation and play if autoplay is true\r\n   * @private\r\n   * @property {string} src - src url\r\n   * @param {array} times - array of time length of each image\r\n   * @param {number} cnt - total counts of gif images\r\n   * @param {array} frames - array of each image\r\n   */\r\n  __ready ({ src, times, cnt, frames }) {\r\n    log('__ready')\r\n    this.__textureSrc = src\r\n    this.__delayTimes = times\r\n    cnt ? this.__loopCnt = cnt : this.__infinity = true\r\n    this.__frames = frames\r\n    this.__frameCnt = times.length\r\n    this.__startTime = Date.now()\r\n    this.__width = THREE.Math.floorPowerOfTwo(frames[0].width)\r\n    this.__height = THREE.Math.floorPowerOfTwo(frames[0].height)\r\n    this.__cnv.width = this.__width\r\n    this.__cnv.height = this.__height\r\n    this.__draw()\r\n    if (this.__autoplay) {\r\n      this.play()\r\n    }\r\n    else {\r\n      this.pause()\r\n    }\r\n  },\r\n\r\n  /*=============================\r\n  =            reset            =\r\n  =============================*/\r\n  /**\r\n   * @private\r\n   */\r\n  __reset () {\r\n    this.pause()\r\n    this.__clearCanvas()\r\n    this.__startTime = 0\r\n    this.__nextFrameTime = 0\r\n    this.__frameIdx = 0\r\n    this.__frameCnt = 0\r\n    this.__delayTimes = null\r\n    this.__infinity = false\r\n    this.__loopCnt = 0\r\n    this.__frames = null\r\n    this.__textureSrc = null\r\n  },\r\n})\r\n"],"names":["exports","gif","successCB","errorCB","pos","delayTimes","loadCnt","graphicControl","imageData","frames","loopCnt","Math","pow","gifHeader","subarray","offset","blockId","label","indexOf","push","frame","disposalMethod","blob","URL","createObjectURL","Blob","length","cnv","document","createElement","imageFix","i","img","Image","onload","e","this","bind","src","toDataURL","width","height","loadImg","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","module","__webpack_modules__","AFRAME","parseUrl","utils","srcLoader","debug","enable","warn","log","gifData","createError","err","status","message","timestamp","Date","now","registerShader","schema","color","type","fog","default","autoplay","init","data","el","components","__cnv","__ctx","getContext","__texture","THREE","Texture","repeat","wrapS","RepeatWrapping","wrapT","set","x","y","__material","__reset","material","MeshBasicMaterial","map","sceneEl","addBehavior","update","oldData","__updateMaterial","__updateTexture","tick","t","__frames","paused","__startTime","__nextFrameTime","nextFrame","newData","__getMaterialData","Object","keys","forEach","key","Color","__setTexure","__textureSrc","__ready","__autoplay","play","__validateSrc","cb","url","__getImageSrc","__validateAndGetQuerySelector","error","tagName","toLowerCase","srcData","errData","callbacks","tester","onError","crossOrigin","addEventListener","__getUnit8Array","arr","times","cnt","xhr","XMLHttpRequest","open","responseType","uint8Array","Uint8Array","target","response","header","toString","send","selector","querySelector","pause","__paused","togglePlayback","__draw","__delayTimes","__frameIdx","__infinity","__loopCnt","__frameCnt","__clearCanvas","clearRect","__width","__height","needsUpdate","lastFrame","actualFrame","drawImage","floorPowerOfTwo"],"sourceRoot":""}